--19장 저장 서브프로그램 
--19-1
CREATE OR REPLACE PROCEDURE PRO_NOPARAM  
IS
    V_EMPNO NUMBER(4) := 7788;
    V_ENAME VARCHAR2(10);
BEGIN
    V_ENAME := 'SCOTT';
    DBMS_OUTPUT.PUT_LINE('V_EMPNO : ' || V_EMPNO);
    DBMS_OUTPUT.PUT_LINE('V_ENAME : ' || V_ENAME);

END;
/
SET SERVEROUTPUT ON;

--실행: EXECUTE / EXEC 명령어 사용
EXEC PRO_NOPARAM;

--익명 블록에서 프로시저 실행하기
BEGIN 
    PRO_NOPARAM;
END;
/

SELECT *
  FROM USER_SOURCE
 WHERE NAME = 'PRO_NOPARAM';

DROP PROCEDURE PRO_NOPARAM;

--18-7 프로시저에 파라미터 지정하기
CREATE OR REPLACE PROCEDURE PRO_PARAM_IN
(
    PARAM1 IN NUMBER,
    PARAM2 NUMBER,
    PARAM3 NUMBER :=3,
    PARAM4 NUMBER DEFAULT 4
)
IS
BEGIN
    DBMS_OUTPUT.PUT_LINE('PARAM1 : ' || PARAM1);
    DBMS_OUTPUT.PUT_LINE('PARAM2 : ' || PARAM2);
    DBMS_OUTPUT.PUT_LINE('PARAM3 : ' || PARAM3);
    DBMS_OUTPUT.PUT_LINE('PARAM4 : ' || PARAM4);
    
    
END;
/

EXECUTE PRO_PARAM_IN(1, 2, 9, 8); 

EXECUTE PRO_PARAM_IN(1, 2);  --3,4 부분은 디폴트 되있어서 오류X

EXECUTE PRO_PARAM_IN(1);--갯수 않맞음 오류 O

--19-11 파라미터 이름을 활용하여 프로시저에 값 입력하기
EXECUTE PRO_PARAM_IN(PARAM2 => 20, PARAM1 => 10); --  순서 안 마춰줘도 입력 가능

--OUT 모드 파라미터 정의하기
CREATE OR REPLACE PROCEDURE PRO_PARAM_OUT
(
    IN_EMPNO IN EMP.EMPNO%TYPE,
    OUT_ENAME OUT EMP.ENAME%TYPE,
    OUT_SAL OUT EMP.SAL%TYPE
)
IS
BEGIN
    SELECT ENAME, SAL INTO OUT_ENAME, OUT_SAL
      FROM EMP
     WHERE EMPNO = IN_EMPNO;
END PRO_PARAM_OUT;
/


DECLARE
    V_ENAME EMP.ENAME%TYPE;
    V_SAL EMP.SAL%TYPE;
BEGIN
    PRO_PARAM_OUT(7654, V_ENAME, V_SAL);
    DBMS_OUTPUT.PUT_LINE('ENAME : ' || V_ENAME);
    DBMS_OUTPUT.PUT_LINE('SAL : ' || V_SAL);
END;
/

--19-14 IN - OUT 모드
CREATE OR REPLACE PROCEDURE PRO_PARAM_INOUT
(
    INOUT_NO IN OUT NUMBER
)
IS

BEGIN
    INOUT_NO := INOUT_NO * 2;
END;
/

DECLARE
    NO NUMBER;
BEGIN
    NO := 5;
    PRO_PARAM_INOUT(NO);
    DBMS_OUTPUT.PUT_LINE('NO : ' || NO);
END;
/

--19-16
--오류 찾기
CREATE OR REPLACE PROCEDURE PRO_ERR
IS
    ERR_NO NUMBER;
BEGIN
    ERR_NO := 100;
    DBMS_OUTPUT.PUT_LINE('ERR_NO : ' || ERR_NO);       
END;
/

SHOW ERRORS;
------------------

SELECT *
  FROM USER_ERRORS
 WHERE NAME = 'PRO_ERR';

--직원 평균 출력 프로시저
CREATE OR REPLACE PROCEDURE EMP_AVG_SALARY
(   AVG_SALARY OUT NUMBER
)AS 
BEGIN
    SELECT AVG(SAL)
      INTO AVG_SALARY
      FROM EMP;
END EMP_AVG_SALARY;
/

DECLARE
    AVG_SAL NUMBER;
BEGIN
    EMP_AVG_SALARY(AVG_SAL);
    DBMS_OUTPUT.PUT_LINE(TRUNC(AVG_SAL));
END;
/

--IF ELSE 문 사용 프로시저-------------------------------------------------------
CREATE OR REPLACE PROCEDURE IF_SALARY(
    SALARY IN NUMBER
) AS
    AVG_SALARY NUMBER;
BEGIN
    SELECT AVG(SAL)
      INTO AVG_SALARY
      FROM EMP;
    IF SALARY >= AVG_SALARY THEN
        DBMS_OUTPUT.PUT_LINE('평균이상');
    ELSE
        DBMS_OUTPUT.PUT_LINE('평균미만');
    END IF;
END;
/

EXECUTE IF_SALARY(2000);

SELECT HIRE_DATE, EMAIL 
  FROM EMPLOYEES;

--CASE 문 사용 프로시저-----------------------------------------------------
CREATE OR REPLACE PROCEDURE CASE_HIRE_DATE(
    EMP_EMAIL IN EMPLOYEES.EMAIL%TYPE
) AS
    HIRE_YEAR   NCHAR(2);
    TEXT_MSG    VARCHAR2(20);
BEGIN
    SELECT TO_CHAR(HIRE_DATE, 'YY') INTO HIRE_YEAR
      FROM EMPLOYEES
     WHERE EMAIL = EMP_EMAIL;
     
    CASE
        WHEN(HIRE_YEAR = '01') THEN TEXT_MSG := HIRE_YEAR || '년도에 입사';
        WHEN(HIRE_YEAR = '02') THEN TEXT_MSG := HIRE_YEAR || '년도에 입사';
        WHEN(HIRE_YEAR = '03') THEN TEXT_MSG := HIRE_YEAR || '년도에 입사';
        WHEN(HIRE_YEAR = '04') THEN TEXT_MSG := HIRE_YEAR || '년도에 입사';
        WHEN(HIRE_YEAR = '05') THEN TEXT_MSG := HIRE_YEAR || '년도에 입사';
        WHEN(HIRE_YEAR = '06') THEN TEXT_MSG := HIRE_YEAR || '년도에 입사';
        WHEN(HIRE_YEAR = '07') THEN TEXT_MSG := HIRE_YEAR || '년도에 입사';
        WHEN(HIRE_YEAR = '08') THEN TEXT_MSG := HIRE_YEAR || '년도에 입사';
        WHEN(HIRE_YEAR = '09') THEN TEXT_MSG := HIRE_YEAR || '년도에 입사';
        ELSE TEXT_MSG := '01~09년도 이외에 입사';
    END CASE; 
    DBMS_OUTPUT.PUT_LINE(TEXT_MSG);
END;
/

SELECT * FROM EMPLOYEES WHERE EMAIL = 'SKING';
EXECUTE CASE_HIRE_DATE('SKING');

--IN OUT 파라미터 사용 EXCEPTION 처리 프로시저--------------------------------------

SELECT FIRST_NAME, LAST_NAME FROM EMPLOYEES;

CREATE OR REPLACE PROCEDURE IN_OUT_EMP(
    EMP_NAME IN OUT VARCHAR2
) AS
BEGIN
    SELECT FIRST_NAME || ' ' || LAST_NAME INTO EMP_NAME
      FROM EMPLOYEES
     WHERE FIRST_NAME = EMP_NAME OR LAST_NAME = EMP_NAME;
    EMP_NAME := '직원 : ' || EMP_NAME;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN 
        EMP_NAME := '직원 : 없음';    
END;
/

DECLARE
    EMP_NAME VARCHAR2(30) := 'Kang';
BEGIN
    IN_OUT_EMP(EMP_NAME);
    DBMS_OUTPUT.PUT_LINE(EMP_NAME);
END;
/

-------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE CURSOR_IT_PROG AS
    FNAME VARCHAR2(20);
    INAME VARCHAR2(20);
    JOBID VARCHAR2(20);
    CURSOR EMP_CURSOR IS
        SELECT FIRST_NAME, LAST_NAME_NAME, JOB_ID
          FROM EMPLOYEES;
BEGIN
    DBMS_OUTPUT.PUT_LINE('[IT PROGRAMMER]');
    OPEN EMP_CURSOR;
    LOOP
        FETCH EMP_CURSOR INTO FNAME, INAME, JOBID;
        EXIT WHEN EMP_CURSOR%NOTFOUND;
        IF JOBID = 'IT_PROG' THEN
            DBMS_OUTPUT.PUT_LINE('FNAME' || ' ' || INAME);
        END IF;
    END LOOP;
    CLOSE EMP_CURSOR;
END;
/

/*
CURSOR를 이용해 EMPLOYYES 테이블에 
JOB_ID 가 IT_PROG 인 직원의 FIRST_NAME 과 LAST_NAME을
공백을 두고 결합하여 출력하는 프로시저 정의
*/
CREATE OR REPLACE PROCEDURE CURSOR_IT_PROG
IS
    FNAME VARCHAR2(20);
    LNAME VARCHAR2(20);
    JOBID VARCHAR2(20);
    CURSOR EMP_CURSOR IS
        SELECT FIRST_NAME, LAST_NAME, JOB_ID
          FROM EMPLOYEES;
BEGIN
    OPEN EMP_CURSOR;
    LOOP
        FETCH EMP_CURSOR INTO FNAME, LNAME, JOBID;
        EXIT WHEN EMP_CURSOR%NOTFOUND;
        IF JOBID = 'IT_PROG' THEN
            DBMS_OUTPUT.PUT_LINE(FNAME || ' ' || LNAME);
        END IF;
    END LOOP;    
END;
/

SELECT FIRST_NAME, LAST_NAME, JOB_ID
  FROM EMPLOYEES
 WHERE JOB_ID = 'IT_PROG';

EXECUTE CURSOR_IT_PROG();

-------------------문제--------------------------------------------------
SELECT * FROM JOBS;


CREATE OR REPLACE PROCEDURE IF_MINMAX_SALARY
(    SAL IN NUMBER
)IS
    MINAVG NUMBER;
    MAXAVG NUMBER;
BEGIN
    SELECT AVG(MIN_SALARY), AVG(MAX_SALARY)
      INTO MINAVG, MAXAVG
      FROM JOBS;
    
    IF SAL <= MINAVG THEN
    DBMS_OUTPUT.PUT_LINE('최저 평균 이하');
    ELSIF SAL >= MAXAVG THEN
    DBMS_OUTPUT.PUT_LINE('최대 평균 이상');
    ELSE
    DBMS_OUTPUT.PUT_LINE('평균 구간');
    END IF;
END;
/

EXECUTE IF_MINMAX_SALARY(14000); 

SELECT * FROM NLS_DATABASE_PARAMETERS
 WHERE PARAMETER = 'NLS_CHARACTERSET';
--AL32UTF8 한글 3BYTE
--KO16KSC5601 : 완성형 한글 2BYTE
--KO16MSWIN949 :조합형 한글 2BYTE
SELECT LENGTHB('안녕') FROM DUAL;

-------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE IF_MINMAX_SALARY
IS
    SAL NUMBER&TYPE;
    MINAVG NUMBER;
    MAXAVG NUMBER;
    CURSOR IF_SAL IS 
    SELECT AVG(MIN_SALARY), AVG(MAX_SALARY)
      FROM JOBS;

BEGIN
    
    
    IF SAL <= MINAVG THEN
    DBMS_OUTPUT.PUT_LINE('최저 평균 이하');
    ELSIF SAL >= MAXAVG THEN
    DBMS_OUTPUT.PUT_LINE('최대 평균 이상');
    ELSE
    DBMS_OUTPUT.PUT_LINE('평균 구간');
    END IF;
END;
/
--########################################################################------

--19-19
CREATE OR REPLACE FUNCTION FUNC_AFTERTAX(
    SAL IN NUMBER
)    
RETURN NUMBER
IS
    TAX NUMBER := 0.05;    
BEGIN
    RETURN ROUND(SAL - (SAL * TAX));
END FUNC_AFTERTAX;

SELECT FUNC_AFTERTAX(3000) FROM DUAL;

SELECT ENAME, SAL, FUNC_AFTERTAX(SAL) AS AFTERSAL
  FROM EMP;

DROP FUNCTION FUNC_AFTERTAX;

--패키지 생성하기

CREATE OR REPLACE PACKAGE PKG_EXAMPLE
IS 
    SPEC_NO NUMBER := 10;
    FUNCTION FUNC_AFTERTAX(SAL NUMBER) RETURN NUMBER;
    PROCEDURE PRO_EMP(IN_EMPNO IN EMP.EMPNO%TYPE);
    PROCEDURE PRO_DEPT(IN_DEPTNO IN DEPT.DEPTNO%TYPE);
END;
/

SELECT TEXT
  FROM USER_SOURCE
 WHERE TYPE = 'PACKAGE'
   AND NAME = 'PKG_EXAMPLE';

DESC PKG_EXAMPLE;

--패키지 본문 생성하기
--19-27
CREATE OR REPLACE PACKAGE BODY PKG_EXAMPLE
IS
    BODY_NO NUMBER := 10;
    
    FUNCTION FUNC_AFTERTAX(SAL NUMBER) 
    RETURN NUMBER
    IS
        TAX NUMBER := 0.05;
    BEGIN
        RETURN ROUND(SAL -(SAL*TAX));
    END FUNC_AFTERTAX;
    
    PROCEDURE PRO_EMP(IN_EMPNO IN EMP.EMPNO%TYPE)
    IS 
            OUT_ENAME EMP.ENAME%TYPE;
            OUT_SAL EMP.SAL%TYPE;
    BEGIN 
        SELECT ENAME, SAL
          INTO OUT_ENAME, OUT_SAL
          FROM EMP
         WHERE EMPNO = IN_EMPNO;
        
        DBMS_OUTPUT.PUT_LINE('ENAME : ' || OUT_ENAME);
        DBMS_OUTPUT.PUT_LINE('SAL : ' || OUT_SAL);
        
    END PRO_EMP;
         
    PROCEDURE PRO_DEPT(IN_DEPTNO IN DEPT.DEPTNO%TYPE)
    IS
        OUT_DNAME DEPT.DNAME%TYPE;
        OUT_LOC DEPT.LOC%TYPE;
    BEGIN
        SELECT DNAME, LOC
          INTO OUT_DNAME, OUT_LOC
          FROM DEPT
         WHERE DEPTNO = IN_DEPTNO;
        
        DBMS_OUTPUT.PUT_LINE('DNAME : ' || OUT_DNAME);
        DBMS_OUTPUT.PUT_LINE('LOC : ' || OUT_LOC);
        
    END PRO_DEPT;
END;
/

--프로시저 오버로드---------------------------------------------------------------
CREATE OR REPLACE PACKAGE PKG_OVERLOAD
IS
    PROCEDURE PRO_EMP(IN_EMPNO IN EMP.EMPNO%TYPE);
    PROCEDURE PRO_EMP(IN_ENAME IN EMP.ENAME%TYPE);
    
END;
/

CREATE OR REPLACE PACKAGE BODY PKG_OVERLOAD
IS
    PROCEDURE PRO_EMP(IN_EMPNO IN EMP.EMPNO%TYPE)
    IS
        OUT_ENAME EMP.ENAME%TYPE;
        OUT_SAL EMP.SAL%TYPE;
    BEGIN
        SELECT ENAME, SAL INTO OUT_ENAME, OUT_SAL
          FROM EMP
         WHERE EMPNO = IN_EMPNO;
         
         DBMS_OUTPUT.PUT_LINE('ENAME : ' || OUT_ENAME);
         DBMS_OUTPUT.PUT_LINE('SAL : ' || OUT_SAL);
    END PRO_EMP;
    
    PROCEDURE PRO_EMP(IN_ENAME IN EMP.ENAME%TYPE)
    IS
        OUT_ENAME EMP.ENAME%TYPE;
        OUT_SAL EMP.SAL%TYPE;
    BEGIN
        SELECT ENAME, SAL INTO OUT_ENAME, OUT_SAL
          FROM EMP
         WHERE ENAME = IN_ENAME;
         
         DBMS_OUTPUT.PUT_LINE('ENAME : ' || OUT_ENAME);
         DBMS_OUTPUT.PUT_LINE('SAL : ' || OUT_SAL);
    END PRO_EMP;
END;
/

--실습 19-30
BEGIN
    DBMS_OUTPUT.PUT_LINE('-- PKG_EXAMPLE.FUNC_AFTERTAX(3000) --');
    DBMS_OUTPUT.PUT_LINE('AFTER-TAX : ' || PKG_EXAMPLE.FUNC_AFTERTAX(3000));
    
    DBMS_OUTPUT.PUT_LINE('-- PKG_EXAMPLE.PRO_EMP(7788) --');
    PKG_EXAMPLE.PRO_EMP(7788);

    
    DBMS_OUTPUT.PUT_LINE('-- PKG_EXAMPLE.PRO_DEPT(10) --');
    PKG_EXAMPLE.PRO_DEPT(10);
    
    DBMS_OUTPUT.PUT_LINE('-- PKG_OVERLOAD.PRO_EMP(7788) --');
    PKG_OVERLOAD.PRO_EMP(7788);
    
    DBMS_OUTPUT.PUT_LINE('-- PKG_OVERLOAD.PRO_EMP(''SCOTT'') --');
    PKG_OVERLOAD.PRO_EMP('SCOTT');    
END;
/

--실습 19-31 트리거
CREATE TABLE EMP_TRG
    AS SELECT * FROM EMP;

SELECT * FROM EMP_TRG;

CREATE OR REPLACE TRIGGER NODML_WEEKEND
BEFORE
INSERT OR UPDATE OR DELETE ON EMP_TRG
BEGIN
    IF TO_CHAR(SYSDATE, 'DY') IN ('토', '일') THEN
        IF INSERTING THEN 
            RAISE_APPLICATION_ERROR(-20000, '주말 사원정보 추가 불가');
        ELSIF UPDATING THEN
            RAISE_APPLICATION_ERROR(-20001, '주말 사원정보 수정 불가');
        ELSIF DELETING THEN
            RAISE_APPLICATION_ERROR(-20002, '주말 사원정보 삭제 불가');
        ELSE
            RAISE_APPLICATION_ERROR(-20003, '주말 사원정보 변경 불가');
        END IF;
    END IF;
END;
/

SELECT * FROM EMP_TRG WHERE EMPNO = 7788;
UPDATE EMP_TRG SET SAL = 3500 WHERE EMPNO = 7799;  --수정불가 메시지

--------------------------------------------------------------------------------
CREATE TABLE EMP_TRG_LOG(
    TABLE_NAME VARCHAR2(10), --DML 수행된 테이블 이름
    DML_TYPE VARCHAR2(10),   --INSERT, UPDATE, DELETE
    EMPNO NUMBER(4),         --DML 대상이 된 사원 번호
    USER_NAME VARCHAR2(30),   --DML 수행한 유저 이름
    CHANGE_DATE DATE         --DML 수행된 날짜
    
);

CREATE OR REPLACE TRIGGER TRG_EMP_LOG
AFTER
INSERT OR UPDATE OR DELETE ON EMP_TRG
FOR EACH ROW
BEGIN 
    IF INSERTING THEN 
        INSERT INTO EMP_TRG_LOG
        VALUES ('EMP_TRG', 'INSERT', :NEW.EMPNO,
                SYS_CONTEXT('USERENV', 'SESSION_USER'), SYSDATE);
    ELSIF UPDATING THEN 
        INSERT INTO EMP_TRG_LOG
        VALUES ('EMP_TRG', 'UPDATE', :OLD.EMPNO,
                SYS_CONTEXT('USERENV', 'SESSION_USER'), SYSDATE);
    ELSIF DELETING THEN 
        INSERT INTO EMP_TRG_LOG
        VALUES ('EMP_TRG', 'DELETE', :OLD.EMPNO,
                SYS_CONTEXT('USERENV', 'SESSION_USER'), SYSDATE);
    END IF;
END;
/

SELECT * FROM EMP_TRG_LOG;

INSERT INTO EMP_TRG
VALUES(9999, 'TESTEMP', 'CLERK', 7788,
        '2024-06-18',1200, NULL, 20);

COMMIT;

SELECT * 
  FROM EMP_TRG
 WHERE MGR = 7788;

UPDATE EMP_TRG 
   SET SAL = 1300
 WHERE MGR = 7788; 

COMMIT;

SELECT TRIGGER_NAME, TRIGGER_TYPE
     , TABLE_NAME, STATUS
  FROM USER_TRIGGERS;

--중간 문제
--함수
CREATE OR REPLACE FUNCTION TO_YYYYMMDD(dt DATE)
RETURN VARCHAR2
IS
    CHAR_DATE VARCHAR2(20);
BEGIN
    CHAR_DATE := TO_CHAR(dt, 'YYYYMMDD');
    RETURN CHAR_DATE;
    END;
/
SELECT TO_YYYYMMDD(SYSDATE)FROM DUAL;

CREATE OR REPLACE FUNCTION GET_AGE(dt DATE)
RETURN NUMBER
IS
    AGE NUMBER;
BEGIN
    AGE := TRUNC(MONTHS_BETWEEN(TRUNC(SYSDATE), 
                TO_YYYYMMDD(dt) )/12);
    RETURN AGE;
END;
/

SELECT GET_AGE('20010101') FROM DUAL;
--
SELECT TRUNC(MONTHS_BETWEEN(TRUNC(SYSDATE), 
                TO_YYYYMMDD(TO_DATE('20010101', 'YYYYMMDD')) )/12) AS AGE
  FROM DUAL;

SELECT 23*12 FROM DUAL;

SELECT TRUNC(SYSDATE) FROM DUAL;

SELECT TO_YYYYMMDD(TO_DATE('20010101', 'YYYYMMDD')) FROM DUAL;

CREATE OR REPLACE FUNCTION ADD_NUM(IN_NUM1 INTEGER, IN_NUM2 INTEGER)
RETURN INTEGER
IS
BEGIN
    RETURN IN_NUM1 + IN_NUM2;
END;
/

SELECT ADD_NUM(23, 2) FROM DUAL;


--2) 부서번호를 입력하면 해당 부서에서 근무하는 사원 수를 반환하는 함수를 정의하시오.
--   (함수명 get_emp_count)

SELECT * FROM EMP;

CREATE OR REPLACE FUNCTION get_emp_count(EMPNUM INTEGER)
RETURN NUMBER
IS
    PNUM NUMBER;
BEGIN
    SELECT COUNT(*) INTO PNUM FROM EMP WHERE DEPTNO = EMPNUM;
    RETURN PNUM;
END;
/

SELECT COUNT(DEPTNO)
FROM EMP
 WHERE DEPTNO = 30;

SELECT DEPTNO FROM EMP;

--##############################################################################
CREATE OR REPLACE PROCEDURE PRO_DEPT
(
   INOUT_DEPTNO IN OUT DEPT.DEPTNO%TYPE,
   OUT_DNAME OUT DEPT.DNAME%TYPE,
   OUT_LOC OUT DEPT.LOC%TYPE
)
IS
BEGIN
    SELECT DEPTNO, DNAME, LOC 
      INTO INOUT_DEPTNO, OUT_DNAME, OUT_LOC
      FROM DEPT
     WHERE DEPTNO =INOUT_DEPTNO;
END;    
/

DECLARE 
    V_DEPTNO DEPT.DEPTNO%TYPE;
    V_DNAME DEPT.DNAME%TYPE;
    V_LOC DEPT.LOC%TYPE;
BEGIN
    V_DEPTNO := 10;
    PRO_DEPT(V_DEPTNO, V_DNAME, V_LOC);
    DBMS_OUTPUT.PUT_LINE('부서 번호 : ' || V_DEPTNO);
    DBMS_OUTPUT.PUT_LINE('부서 이름 : ' || V_DNAME);
    DBMS_OUTPUT.PUT_LINE('지역 : ' || V_LOC);
    
END;
/
